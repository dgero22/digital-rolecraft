
import React, { useRef, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Send, Users } from "lucide-react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import MessageItem from './MessageItem';
import type { Message, Persona } from '@/types';

interface MessageListProps {
  messages: Message[];
  persona?: Persona;
  personas?: Persona[];
  isGenerating: boolean;
}

const MessageList: React.FC<MessageListProps> = ({ 
  messages, 
  persona, 
  personas = [], 
  isGenerating 
}) => {
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const isGroup = personas.length > 0;
  const displayPersona = persona || personas[0];
  
  // Use the personas prop if provided, otherwise create a single-item array with the persona
  const allPersonas = personas.length > 0 ? personas : (persona ? [persona] : []);
  
  useEffect(() => {
    scrollToBottom();
  }, [messages, isGenerating]);
  
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };
  
  const getInitials = (name: string) => {
    return name
      .split(' ')
      .map((n) => n[0])
      .join('')
      .toUpperCase();
  };
  
  const getPersonaById = (personaId: string | undefined) => {
    if (!personaId) return null;
    return allPersonas.find(p => p.id === personaId) || null;
  };

  if (messages.length === 0 && !isGenerating) {
    return (
      <div className="h-full flex flex-col items-center justify-center text-center p-4">
        <div className="w-16 h-16 rounded-full bg-primary/10 flex items-center justify-center mb-4">
          {isGroup ? (
            <Users className="h-6 w-6 text-primary" />
          ) : (
            <Send className="h-6 w-6 text-primary" />
          )}
        </div>
        <h3 className="text-lg font-medium">Start a conversation</h3>
        <p className="text-muted-foreground max-w-md mt-2">
          {isGroup 
            ? `Send a message to start a group chat with ${personas.length} personas.`
            : `Send a message to start chatting with ${displayPersona?.name}. Responses are generated by Gemini-1.5-flash based on the persona's traits.`
          }
        </p>
      </div>
    );
  }

  return (
    <div className="flex-1 overflow-y-auto p-4 space-y-4">
      {messages.map((message) => {
        // For persona messages, find the corresponding persona
        const messagePersona = message.sender === 'persona' && message.personaId
          ? getPersonaById(message.personaId)
          : null;
        
        return (
          <MessageItem 
            key={message.id} 
            message={message} 
            persona={messagePersona || persona} 
          />
        );
      })}
      
      {isGenerating && (
        <div className="flex justify-start">
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="bg-card border rounded-lg p-3 max-w-[80%]"
          >
            <div className="flex items-center space-x-2 mb-1">
              {isGroup ? (
                <Avatar className="h-6 w-6 bg-primary/10">
                  <AvatarFallback className="text-xs bg-primary/10">
                    <Users className="h-3 w-3 text-primary" />
                  </AvatarFallback>
                </Avatar>
              ) : (
                <Avatar className="h-6 w-6">
                  <AvatarImage src={displayPersona?.avatar} alt={displayPersona?.name} />
                  <AvatarFallback className="text-xs">{getInitials(displayPersona?.name || "")}</AvatarFallback>
                </Avatar>
              )}
              <span className="text-xs font-medium">
                {isGroup ? "Someone is typing..." : displayPersona?.name}
              </span>
            </div>
            <div className="flex space-x-1">
              <div className="w-2 h-2 rounded-full bg-foreground/30 animate-pulse-subtle" style={{ animationDelay: '0ms' }}></div>
              <div className="w-2 h-2 rounded-full bg-foreground/30 animate-pulse-subtle" style={{ animationDelay: '300ms' }}></div>
              <div className="w-2 h-2 rounded-full bg-foreground/30 animate-pulse-subtle" style={{ animationDelay: '600ms' }}></div>
            </div>
          </motion.div>
        </div>
      )}
      
      <div ref={messagesEndRef} />
    </div>
  );
};

export default MessageList;
